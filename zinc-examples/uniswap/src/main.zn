//!
//! Uniswap Exchange Interface V1.
//!

mod types;
mod transaction;
mod utils;
mod factory;

use self::factory::Factory;
use self::transaction::Transaction;
use self::types::Balance;
use self::types::Address;
use self::types::Timestamp;

const ZERO_ADDRESS: Address = 0;
const ZERO_BALANCE: Balance = 0;

contract Exchange {
    /// Uniswap V1
    name: [u8; 32];
    /// UNI-V1
    symbol: [u8; 32];
    /// Interface for the factory that created this contract
    _factory: Factory;

    /// Address of the ERC20 token traded on this contract
    token_address: Address;
    /// ETH balance on this contract
    balance: Balance;
    /// Total number of UNI in existence
    total_supply: Balance;

    /// UNI balance of an address
    balances: [Balance; 0]; // should be [Balance; 2^160]
    /// UNI allowance of one address on another
    allowances: [[Balance; 0]; 0]; // should be [[Balance; 2^160]; 2^160]

    ///
    /// Deposit ETH and Tokens (self.token_address) at current ratio to mint UNI tokens.
    ///
    /// 'min_liquidity' does nothing when total UNI supply is 0.
    ///
    /// # Arguments
    /// `min_liquidity` Minimum number of UNI sender will mint if total UNI supply is greater than 0.
    /// `max_tokens` Maximum number of tokens deposited. Deposits max amount if total UNI supply is 0.
    /// `deadline` Time after which this transaction can no longer be executed.
    ///
    /// # Returns
    /// The amount of UNI minted
    ///
    pub fn add_liquidity(
        mut self,
        tx: Transaction,
        min_liquidity: Balance,
        max_tokens: Balance,
        deadline: Timestamp,
    ) -> Balance {
        require(deadline > tx.block.timestamp && max_tokens > ZERO_BALANCE && tx.value > ZERO_BALANCE);

        let total_liquidity: Balance = self.total_supply;

        if total_liquidity > ZERO_BALANCE {
            require(min_liquidity > ZERO_BALANCE);

            let eth_reserve: Balance = self.balance - tx.value;
            let token_reserve: Balance = self.balance_of(self.token_address);
            
            let token_amount: Balance = tx.value * token_reserve / eth_reserve + 1 as Balance;
            let liquidity_minted: Balance = tx.value * total_liquidity / eth_reserve;
            require(max_tokens >= token_amount && liquidity_minted >= min_liquidity);

            self.balances[tx.from] += liquidity_minted;
            self.total_supply = total_liquidity + liquidity_minted;
            require(self.transfer_from(tx, tx.from, self.token_address, token_amount));

            liquidity_minted
        } else {
            require(self._factory.address != ZERO_ADDRESS && self.token_address != ZERO_ADDRESS && tx.value >= 1000000000 as Balance);
            require(self._factory.get_exchange(self.token_address) == self.token_address);

            let token_amount: Balance = max_tokens;
            let initial_liquidity: Balance = self.balance;
            self.total_supply = initial_liquidity;
            self.balances[tx.from] = initial_liquidity;
            require(self.transfer_from(tx, tx.from, self.token_address, token_amount));

            initial_liquidity
        }
    }

    ///
    /// Burn UNI tokens to withdraw ETH and Tokens at current ratio.
    ///
    /// # Arguments
    /// `amount` Amount of UNI burned.
    /// `min_eth` Minimum ETH withdrawn.
    /// `min_tokens` Minimum Tokens withdrawn.
    /// `deadline` Time after which this transaction can no longer be executed.
    ///
    /// # Returns
    /// The amount of ETH and Tokens withdrawn.
    ///
    pub fn remove_liquidity(
        mut self,
        tx: Transaction,
        amount: Balance,
        min_eth: Balance,
        min_tokens: Balance,
        deadline: Timestamp,
    ) -> (Balance, Balance) {
        require(amount > ZERO_BALANCE && deadline > tx.block.timestamp && min_eth > ZERO_BALANCE && min_tokens > ZERO_BALANCE);

        let total_liquidity: Balance = self.total_supply;
        require(total_liquidity > ZERO_BALANCE);

        let token_reserve: Balance = self.balance_of(self.token_address);
        let eth_amount: Balance = amount * self.balance / total_liquidity;
        let token_amount: Balance = amount * token_reserve / total_liquidity;
        require(eth_amount >= min_eth && token_amount >= min_tokens);

        self.balances[tx.from] -= amount;
        self.total_supply = total_liquidity - amount;
//        send(tx.from, eth_amount);
        require(self.transfer(tx, tx.from, token_amount));

        (eth_amount, token_amount)
    }

    ///
    /// Convert ETH to Tokens.
    ///
    /// User specifies exact input (tx.value).
    /// User cannot specify minimum output or deadline.
    ///
    pub fn default(mut self, tx: Transaction) -> Balance {
        self.eth_to_token_input(tx, tx.value, 1 as Balance, tx.block.timestamp, tx.from, tx.from)
    }

    fn eth_to_token_input(
        mut self,
        tx: Transaction,
        eth_sold: Balance,
        min_tokens: Balance,
        deadline: Timestamp,
        buyer: Address,
        recipient: Address,
    ) -> Balance {
        require(deadline >= tx.block.timestamp && eth_sold > ZERO_BALANCE && min_tokens > ZERO_BALANCE);

        let token_reserve: Balance = self.balance_of(self.token_address);
        let tokens_bought: Balance = utils::get_input_price(eth_sold, self.balance - eth_sold, token_reserve);
        require(tokens_bought >= min_tokens);
        require(self.transfer(tx, recipient, tokens_bought));

        tokens_bought
    }

    ///
    /// Convert ETH to Tokens.
    ///
    /// User specifies exact input (tx.value) and minimum output.
    ///
    /// # Arguments
    /// `min_tokens` Minimum Tokens bought.
    /// `deadline` Time after which this transaction can no longer be executed.
    ///
    /// # Returns
    /// Amount of Tokens bought.
    ///
    pub fn eth_to_token_swap_input(
        mut self,
        tx: Transaction,
        min_tokens: Balance,
        deadline: Timestamp,
    ) -> Balance {
        self.eth_to_token_input(tx, tx.value, min_tokens, deadline, tx.from, tx.from)
    }

    ///
    /// Convert ETH to Tokens and transfers Tokens to recipient.
    ///
    /// User specifies exact input (tx.value) and minimum output.
    ///
    /// # Arguments
    /// `min_tokens` Minimum Tokens bought.
    /// `deadline` Time after which this transaction can no longer be executed.
    /// `recipient` The address that receives output Tokens.
    ///
    /// # Returns
    /// Amount of Tokens bought.
    ///
    pub fn eth_to_token_transfer_input(
        mut self,
        tx: Transaction,
        min_tokens: Balance,
        deadline: Timestamp,
    ) -> Balance {
        require(tx.to != self.token_address && tx.to != ZERO_ADDRESS);

        self.eth_to_token_input(tx, tx.value, min_tokens, deadline, tx.from, tx.to)
    }

    fn eth_to_token_output(
        mut self,
        tx: Transaction,
        tokens_bought: Balance,
        max_eth: Balance,
        deadline: Timestamp,
        buyer: Address,
    ) -> Balance {
        require(deadline >= tx.block.timestamp && tokens_bought > ZERO_BALANCE && max_eth > ZERO_BALANCE);

        let token_reserve: Balance = self.balance_of(self.token_address);
        let eth_sold: Balance = utils::get_output_price(tokens_bought, self.balance - max_eth, token_reserve);

        // Throws if eth_sold > max_eth
        let eth_refund: Balance = max_eth - eth_sold;
        if eth_refund > ZERO_BALANCE {
//            send(buyer, eth_refund);
        };
        require(self.transfer(tx, tx.to, tokens_bought));

        eth_sold
    }

    ///
    /// Convert ETH to Tokens.
    ///
    /// User specifies maximum input (tx.value) and exact output.
    ///
    /// # Arguments
    /// `tokens_bought` Amount of tokens bought.
    /// `deadline` Time after which this transaction can no longer be executed.
    ///
    /// # Returns
    /// Amount of ETH sold.
    ///
    pub fn eth_to_token_swap_output(
        mut self,
        tx: Transaction,
        tokens_bought: Balance,
        deadline: Timestamp,
    ) -> Balance {
        self.eth_to_token_output(tx, tokens_bought, tx.value, deadline, tx.from)
    }

    ///
    /// Convert ETH to Tokens and transfers Tokens to recipient.
    ///
    /// User specifies maximum input (tx.value) and exact output.
    ///
    /// # Arguments
    /// `tokens_bought` Amount of tokens bought.
    /// `deadline` Time after which this transaction can no longer be executed.
    ///
    /// # Returns
    /// Amount of ETH sold.
    ///
    pub fn eth_to_token_transfer_output(
        mut self,
        tx: Transaction,
        tokens_bought: Balance,
        deadline: Timestamp,
    ) -> Balance {
        require(tx.to != self.token_address && tx.to != ZERO_ADDRESS);

        self.eth_to_token_output(tx, tokens_bought, tx.value, deadline, tx.to)
    }

    fn token_to_eth_input(
        mut self,
        tx: Transaction,
        tokens_sold: Balance,
        min_eth: Balance,
        deadline: Timestamp,
        buyer: Address,
    ) -> Balance {
        require(deadline >= tx.block.timestamp && tx.value > ZERO_BALANCE && min_eth > ZERO_BALANCE);

        let token_reserve: Balance = self.balance_of(self.token_address);
        let eth_bought: Balance = utils::get_input_price(tokens_sold, token_reserve, self.balance);
        let wei_bought: Balance = eth_bought;
        require(wei_bought >= min_eth);

//        send(tx.to, wei_bought); // external function

        require(self.transfer_from(tx, buyer, self.token_address, tx.value));

        wei_bought
    }

    ///
    /// Convert Tokens to ETH.
    ///
    /// User specifies exact input and minimum output.
    ///
    /// # Arguments
    /// `tokens_sold` Amount of Tokens sold.
    /// `min_eth` Minimum ETH purchased.
    /// `deadline` Time after which this transaction can no longer be executed.
    ///
    /// # Returns
    /// Amount of ETH bought.
    ///
    pub fn token_to_eth_swap_input(
        mut self,
        tx: Transaction,
        min_eth: Balance,
        deadline: Timestamp,
    ) -> Balance {
        self.token_to_eth_input(tx, tx.value, min_eth, deadline, tx.from)
    }

    ///
    /// Convert Tokens to ETH and transfers ETH to recipient.
    ///
    /// User specifies exact input and minimum output.
    ///
    /// # Arguments
    /// `tokens_sold` Amount of Tokens sold.
    /// `min_eth` Minimum ETH purchased.
    /// `deadline` Time after which this transaction can no longer be executed.
    /// `recipient` The address that receives output ETH.
    ///
    /// # Returns
    /// Amount of ETH bought.
    ///
    pub fn token_to_eth_transfer_input(
        mut self,
        tx: Transaction,
        min_eth: Balance,
        deadline: Timestamp,
    ) -> Balance {
        require(tx.to != self.token_address && tx.to != ZERO_ADDRESS);

        self.token_to_eth_input(tx, tx.value, min_eth, deadline, tx.to)
    }

    fn token_to_eth_output(
        mut self,
        tx: Transaction,
        eth_bought: Balance,
        max_tokens: Balance,
        deadline: Timestamp,
        buyer: Address,
        recipient: Address,
    ) -> Balance {
        require(deadline >= tx.block.timestamp && eth_bought > ZERO_BALANCE);

        let token_reserve: Balance = self.balance_of(self.token_address);
        let tokens_sold: Balance = utils::get_output_price(eth_bought, token_reserve, self.total_supply);
        require(max_tokens >= tokens_sold, "tokens sold is always > 0");

//        send(tx.to, eth_bought);

        require(self.transfer_from(tx, buyer, self.token_address, tokens_sold));

        tokens_sold
    }

    ///
    /// Convert Tokens to ETH.
    ///
    /// User specifies maximum input and exact output.
    ///
    /// # Arguments
    /// `eth_bought` Amount of ETH purchased.
    /// `max_tokens` Maximum Tokens sold.
    /// `deadline` Time after which this transaction can no longer be executed.
    ///
    /// # Returns
    /// Amount of Tokens sold.
    ///
    pub fn token_to_eth_swap_output(
        mut self,
        tx: Transaction,
        eth_bought: Balance,
        max_tokens: Balance,
        deadline: Timestamp,
    ) -> Balance {
        self.token_to_eth_output(tx, eth_bought, max_tokens, deadline, tx.from, tx.from)
    }

    ///
    /// Convert Tokens to ETH and transfers ETH to recipient.
    ///
    /// User specifies maximum input and exact output.
    ///
    /// # Arguments
    /// `eth_bought` Amount of ETH purchased.
    /// `max_tokens` Maximum Tokens sold.
    /// `deadline` Time after which this transaction can no longer be executed.
    /// `recipient` The address that receives output ETH.
    ///
    /// # Returns
    /// Amount of Tokens sold.
    ///
    pub fn token_to_eth_transfer_output(
        mut self,
        tx: Transaction,
        eth_bought: Balance,
        max_tokens: Balance,
        deadline: Timestamp,
    ) -> Balance {
        require(tx.to != self.token_address && tx.to != ZERO_ADDRESS);

        self.token_to_eth_output(tx, eth_bought, max_tokens, deadline, tx.from, tx.to)
    }

    fn token_to_token_input(
        mut self,
        tx: Transaction,
        tokens_sold: Balance,
        min_tokens_bought: Balance,
        min_eth_bought: Balance,
        deadline: Timestamp,
        buyer: Address,
        exchange_addr: Address,
    ) -> Balance {
        require(deadline >= tx.block.timestamp && tokens_sold > ZERO_BALANCE && min_tokens_bought > ZERO_BALANCE && min_eth_bought > ZERO_BALANCE);
        require(exchange_addr != self.token_address && exchange_addr != ZERO_ADDRESS);

        let token_reserve: Balance = self.balance_of(self.token_address);
        let eth_bought: Balance = utils::get_input_price(tokens_sold, token_reserve, self.balance);
        let wei_bought: Balance = eth_bought;
        require(wei_bought >= min_eth_bought);
        require(self.transfer_from(tx, buyer, self.token_address, tokens_sold));

//        Exchange(exchange_addr).eth_to_token_transfer_input(min_tokens_bought, deadline, tx.to, wei_bought)

        ZERO_BALANCE
    }

    ///
    /// Convert Tokens (self.token) to Tokens (token_addr).
    ///
    /// User specifies exact input and minimum output.
    ///
    /// # Arguments
    /// `tokens_sold` Amount of Tokens sold.
    /// `min_tokens_bought` Minimum Tokens (token_addr) purchased.
    /// `min_eth_bought` Minimum ETH purchased as intermediary.
    /// `deadline` Time after which this transaction can no longer be executed.
    /// `token_addr` The address of the token being purchased.
    ///
    /// # Returns
    /// Amount of Tokens (token_addr) bought.
    ///
    pub fn token_to_token_swap_input(
        mut self,
        tx: Transaction,
        tokens_sold: Balance,
        min_tokens_bought: Balance,
        min_eth_bought: Balance,
        deadline: Timestamp,
        token_addr: Address,
    ) -> Balance {
        let exchange_addr: Address = self._factory.get_exchange(token_addr);

        self.token_to_token_input(tx, tokens_sold, min_tokens_bought, min_eth_bought, deadline, tx.from, exchange_addr)
    }

    ///
    /// Convert Tokens (self.token) to Tokens (token_addr) and transfers Tokens (token_addr) to recipient.
    ///
    /// User specifies exact input and minimum output.
    ///
    /// # Arguments
    /// `tokens_sold` Amount of Tokens sold.
    /// `min_tokens_bought` Minimum Tokens (token_addr) purchased.
    /// `min_eth_bought` Minimum ETH purchased as intermediary.
    /// `deadline` Time after which this transaction can no longer be executed.
    /// `recipient` The address that receives output ETH.
    /// `token_addr` The address of the token being purchased.
    ///
    /// # Returns
    /// Amount of Tokens (token_addr) bought.
    ///
    pub fn token_to_token_transfer_input(
        mut self,
        tx: Transaction,
        tokens_sold: Balance,
        min_tokens_bought: Balance,
        min_eth_bought: Balance,
        deadline: Timestamp,
        token_addr: Address,
    ) -> Balance {
        let exchange_addr: Address = self._factory.get_exchange(token_addr);

        self.token_to_token_input(tx, tokens_sold, min_tokens_bought, min_eth_bought, deadline, tx.to, exchange_addr)
    }

    fn token_to_token_output(
        mut self,
        tx: Transaction,
        tokens_bought: Balance,
        max_tokens_sold: Balance,
        max_eth_sold: Balance,
        deadline: Timestamp,
        buyer: Address,
        exchange_addr: Address
    ) -> Balance {
        require(deadline >= tx.block.timestamp && tokens_bought > ZERO_BALANCE && max_eth_sold > ZERO_BALANCE);
        require(exchange_addr != self.token_address && exchange_addr != ZERO_ADDRESS);

//        let eth_bought: Balance = Exchange(exchange_addr).getEthToTokenOutputPrice(tokens_bought);
        let eth_bought: Balance = ZERO_BALANCE;
        let token_reserve: Balance = self.balance_of(self.token_address);
        let tokens_sold: Balance = utils::get_output_price(eth_bought, token_reserve, self.balance);
        require(max_tokens_sold >= tokens_sold && max_eth_sold >= eth_bought, "tokens sold is always > 0");
        require(self.transfer_from(tx, buyer, self.token_address, tokens_sold));

//        Exchange(exchange_addr).ethToTokenTransferOutput(tokens_bought, deadline, tx.to, value=eth_bought);
        ZERO_BALANCE
    }

    ///
    /// Convert Tokens (self.token) to Tokens (token_addr).
    ///
    /// User specifies maximum input and exact output.
    ///
    /// # Arguments
    /// `tokens_bought` Amount of Tokens (token_addr) bought.
    /// `max_tokens_sold` Maximum Tokens (self.token) sold.
    /// `max_eth_sold` Maximum ETH purchased as intermediary.
    /// `deadline` Time after which this transaction can no longer be executed.
    /// `token_addr` The address of the token being purchased.
    ///
    /// # Returns
    /// Amount of Tokens (self.token) sold.
    ///
    pub fn token_to_token_swap_output(
        mut self,
        tx: Transaction,
        tokens_bought: Balance,
        max_tokens_sold: Balance,
        max_eth_sold: Balance,
        deadline: Timestamp,
        token_addr: Address,
    ) -> Balance {
        let exchange_addr: Address = self._factory.get_exchange(token_addr);

        self.token_to_token_output(tx, tokens_bought, max_tokens_sold, max_eth_sold, deadline, tx.from, exchange_addr)
    }

    ///
    /// Convert Tokens (self.token_address) to Tokens (token_addr) and transfers Tokens (token_addr) to recipient.
    ///
    /// User specifies maximum input and exact output.
    ///
    /// # Arguments
    /// `tokens_bought` Amount of Tokens (token_addr) bought.
    /// `max_tokens_sold` Maximum Tokens (self.token_address) sold.
    /// `max_eth_sold` Maximum ETH purchased as intermediary.
    /// `deadline` Time after which this transaction can no longer be executed.
    /// `recipient` The address that receives output ETH.
    /// `token_addr` The address of the token being purchased.
    ///
    /// # Returns
    /// Amount of Tokens sold (self.token_address).
    ///
    pub fn token_to_token_transfer_output(
        mut self,
        tx: Transaction,
        tokens_bought: Balance,
        max_tokens_sold: Balance,
        max_eth_sold: Balance,
        deadline: Timestamp,
        token_addr: Address,
    ) -> Balance {
        let exchange_addr: Address = self._factory.get_exchange(token_addr);

        self.token_to_token_output(tx, tokens_bought, max_tokens_sold, max_eth_sold, deadline, tx.from, exchange_addr)
    }

    ///
    /// Convert Tokens (self.token) to Tokens (exchange_addr.token).
    ///
    /// Allows trades through contracts that were not deployed from the same factory.
    /// User specifies exact input and minimum output.
    ///
    /// # Arguments
    /// `tokens_sold` Amount of Tokens sold.
    /// `min_tokens_bought` Minimum Tokens (token_addr) purchased.
    /// `min_eth_bought` Minimum ETH purchased as intermediary.
    /// `deadline` Time after which this transaction can no longer be executed.
    /// `exchange_addr` The address of the exchange for the token being purchased.
    ///
    /// # Returns
    /// Amount of Tokens (exchange_addr.token) bought.
    ///
    pub fn token_to_exchange_swap_input(
        mut self,
        tx: Transaction,
        tokens_sold: Balance,
        min_tokens_bought: Balance,
        min_eth_bought: Balance,
        deadline: Timestamp,
        exchange_addr: Address,
    ) -> Balance {
        self.token_to_token_input(tx, tokens_sold, min_tokens_bought, min_eth_bought, deadline, tx.from, exchange_addr)
    }

    ///
    /// Convert Tokens (self.token) to Tokens (exchange_addr.token) and transfers Tokens (exchange_addr.token) to recipient.
    ///
    /// Allows trades through contracts that were not deployed from the same factory.
    /// User specifies exact input and minimum output.
    ///
    /// # Arguments
    /// `tokens_sold` Amount of Tokens sold.
    /// `min_tokens_bought` Minimum Tokens (token_addr) purchased.
    /// `min_eth_bought` Minimum ETH purchased as intermediary.
    /// `deadline` Time after which this transaction can no longer be executed.
    /// `recipient` The address that receives output ETH.
    /// `exchange_addr` The address of the exchange for the token being purchased.
    ///
    /// # Returns
    /// Amount of Tokens (exchange_addr.token) bought.
    ///
    pub fn token_to_exchange_transfer_input(
        mut self,
        tx: Transaction,
        tokens_sold: Balance,
        min_tokens_bought: Balance,
        min_eth_bought: Balance,
        deadline: Timestamp,
        exchange_addr: Address,
    ) -> Balance {
        require(tx.to != self.token_address);

        self.token_to_token_input(tx, tokens_sold, min_tokens_bought, min_eth_bought, deadline, tx.to, exchange_addr)
    }

    ///
    /// Convert Tokens (self.token) to Tokens (exchange_addr.token).
    ///
    /// Allows trades through contracts that were not deployed from the same factory.
    /// User specifies maximum input and exact output.
    ///
    /// # Arguments
    /// `tokens_bought` Amount of Tokens (token_addr) bought.
    /// `max_tokens_sold` Maximum Tokens (self.token_address) sold.
    /// `max_eth_sold` Maximum ETH purchased as intermediary.
    /// `deadline` Time after which this transaction can no longer be executed.
    /// `exchange_addr` The address of the exchange for the token being purchased.
    ///
    /// # Returns
    /// Amount of Tokens (self.token) sold.
    ///
    pub fn token_to_exchange_swap_output(
        mut self,
        tx: Transaction,
        tokens_bought: Balance,
        max_tokens_sold: Balance,
        max_eth_sold: Balance,
        deadline: Timestamp,
        exchange_addr: Address,
    ) -> Balance {
        self.token_to_token_output(tx, tokens_bought, max_tokens_sold, max_eth_sold, deadline, tx.from, exchange_addr)
    }

    ///
    /// Convert Tokens (self.token) to Tokens (exchange_addr.token) and transfers Tokens (exchange_addr.token) to recipient.
    ///
    /// Allows trades through contracts that were not deployed from the same factory.
    /// User specifies maximum input and exact output.
    ///
    /// # Arguments
    /// `tokens_bought` Amount of Tokens (token_addr) bought.
    /// `max_tokens_sold` Maximum Tokens (self.token) sold.
    /// `max_eth_sold` Maximum ETH purchased as intermediary.
    /// `deadline` Time after which this transaction can no longer be executed.
    /// `recipient` The address that receives output ETH.
    /// `token_addr` The address of the token being purchased.
    ///
    /// # Returns
    /// Amount of Tokens (self.token) sold.
    ///
    pub fn token_to_exchange_transfer_output(
        mut self,
        tx: Transaction,
        tokens_bought: Balance,
        max_tokens_sold: Balance,
        max_eth_sold: Balance,
        deadline: Timestamp,
        exchange_addr: Address,
    ) -> Balance {
        require(tx.to != self.token_address);

        self.token_to_token_output(tx, tokens_bought, max_tokens_sold, max_eth_sold, deadline, tx.to, exchange_addr)
    }


    ///
    /// Public price function for ETH to Token trades with an exact input.
    ///
    /// # Arguments
    /// `eth_sold` Amount of ETH sold.
    ///
    /// # Returns
    /// Amount of Tokens that can be bought with input ETH.
    ///
    pub fn get_eth_to_token_input_price(self, eth_sold: Balance) -> Balance {
        require(eth_sold > ZERO_BALANCE);

        let token_reserve: Balance = self.balance_of(self.token_address);

        utils::get_input_price(eth_sold, self.balance, token_reserve)
    }

    ///
    /// Public price function for ETH to Token trades with an exact output.
    ///
    /// # Arguments
    /// `tokens_bought` Amount of Tokens bought.
    ///
    /// # Returns
    /// Amount of ETH needed to buy output Tokens.
    ///
    pub fn get_eth_to_token_output_price(self, tokens_bought: Balance) -> Balance {
        require(tokens_bought > ZERO_BALANCE);

        let token_reserve: Balance = self.balance_of(self.token_address);

        let eth_sold: Balance = utils::get_output_price(tokens_bought, self.balance, token_reserve);

        eth_sold
    }

    ///
    /// Public price function for Token to ETH trades with an exact input.
    ///
    /// # Arguments
    /// `tokens_sold` Amount of Tokens sold.
    ///
    /// # Returns
    /// Amount of ETH that can be bought with input Tokens.
    ///
    pub fn get_token_to_eth_input_price(self, tokens_sold: Balance) -> Balance {
        require(tokens_sold > ZERO_BALANCE);

        let token_reserve: Balance = self.balance_of(self.token_address);
        let eth_bought: Balance = utils::get_input_price(tokens_sold, token_reserve, self.balance);

        eth_bought
    }

    ///
    /// Public price function for Token to ETH trades with an exact output.
    ///
    /// # Arguments
    /// `eth_bought` Amount of output ETH.
    ///
    /// # Returns
    /// Amount of Tokens needed to buy output ETH.
    ///
    pub fn get_token_to_eth_output_price(self, eth_bought: Balance) -> Balance {
        require(eth_bought > ZERO_BALANCE);

        let token_reserve: Balance = self.balance_of(self.token_address);

        utils::get_output_price(eth_bought, token_reserve, self.balance)
    }

    pub fn balance_of(self, owner: Address) -> Balance {
        self.balances[owner]
    }

    pub fn transfer(
        mut self,
        tx: Transaction,
        to: Address,
        value: Balance,
    ) -> bool {
        self.balances[tx.from] -= value;
        self.balances[to] += value;

        true
    }

    pub fn transfer_from(
        mut self,
        tx: Transaction,
        from: Address,
        to: Address,
        value: Balance,
    ) -> bool {
        self.balances[from] -= value;
        self.balances[to] += value;
        self.allowances[from][tx.from] -= value;

        true
    }

    pub fn approve(
        mut self,
        tx: Transaction,
        spender: Address,
        value: Balance
    ) -> bool {
        self.allowances[tx.from][spender] = value;

        true
    }

    pub fn allowance(
        self,
        owner: Address,
        spender: Address,
    ) -> Balance {
        self.allowances[owner][spender]
    }
}