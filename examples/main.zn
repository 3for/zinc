/*
    Battleships
*/

mod signature;

type Address = [u8; 32];

use signature::Signature;

enum GameState {
    Player1Init = 1,
    Player2Init = 2,
    Player1Turn = 3,
    Player2Turn = 4,
    Player1Won = 5,
    Player2Won = 6,
}

struct State {
    player1: Address,
    player2: Address,
    player1_ships: [[bool; 3]; 3],
    player2_ships: [[bool; 3]; 3],
    game_state: GameState,
}

enum CommandType {
    Player1Init = 1,
    Player2Init = 2,
    Player1Shoot = 3,
    Player2Shoot = 4,
}

struct Command {
    command_type: CommandType,
    shooting_position: (field, field),
    ships: [(field, field); 3],
}

struct Input {
    address: Address,
    state: State,
}

impl Input {
    const VALUE: u8 = 42;

    fn print() {
        dbg!("{}", Self::VALUE);
    }
}

fn game_logic(state: State, command: Command) -> State {
    state
}

fn main(
    input: Input,
    command: Command,
    _signature: Signature
) -> (Input, State)
{
    match input.state.game_state {
        1 => {
//            std::eth::verify(state.player1, signature);
        },
        3 => {
//            std::eth::verify(state.player1, signature);
        },
        2 => {
//            std::eth::verify(state.player2, signature);
        },
        4 => {
//            std::eth::verify(state.player2, signature);
        },
        _ => {
            assert!(false);
        },
    };

    dbg!("{}", Input::print());

    let new_state = game_logic(input.state, command);
    (input, new_state)
}
