//# { "cases": [ {
//#     "case": "default",
//#     "input": {
//#         "address": "0x558ef3cde10f05f73d27cdf30dbb1aa40adf940257e1549c239066",
//#         "balance": "1000",
//#         "merkle_path": [
//#             "0x558ef3cde10f05f73d27cdf30dbb1aa40adf940257e1549c239066"
//#         ]
//#     },
//#     "expect": {
//#         "address": "0x558ef3cde10f05f73d27cdf30dbb1aa40adf940257e1549c239066",
//#         "balance": "1000",
//#         "root_hash": "0x2915116a62d5c0e17357da09e10726afc8030ac60e9371fbd950b407dfabf0"
//#     }
//# } ] }

//!
//! The merkle tree root hash validator.
//!

use std::crypto::sha256;
use std::array::truncate;

type Sha256Digest = u248;

const MERKLE_TREE_HEIGHT: u8 = 1;

fn balance_hash(balance: field) -> Sha256Digest {
    let bits = std::convert::to_bits(balance);
    let bits_padded = std::array::truncate(bits, 248);
    let digest_bits = truncate(sha256(bits_padded), 248);
    std::convert::from_bits_unsigned(digest_bits)
}

fn merkle_node_hash(left: Sha256Digest, right: Sha256Digest) -> Sha256Digest {
    let mut data = [false; 496];

    let left_bits = std::convert::to_bits(left);
    let right_bits = std::convert::to_bits(right);

    for i in (0 as u16)..(248 as u16) {
        data[i] = left_bits[i];
        data[(248 as u16) + i] = right_bits[i];
    }

    let digest_bits = truncate(sha256(data), 248);
    std::convert::from_bits_unsigned(digest_bits)
}

fn restore_root_hash(
    leaf_hash: Sha256Digest,
    address: field,
    merkle_path: [Sha256Digest; MERKLE_TREE_HEIGHT],
) -> Sha256Digest
{
    let address_bits = std::convert::to_bits(address);
    let mut current = leaf_hash;

    for i in 0..MERKLE_TREE_HEIGHT {
        let left_and_right = if address_bits[i] {
            [current, merkle_path[i]]
        } else {
            [merkle_path[i], current]
        };

        current = merkle_node_hash(left_and_right[0], left_and_right[1]);
    }

    current
}

struct PublicInput {
    address: field,
    balance: field,
    root_hash: Sha256Digest,
}

fn main(
    address: field,
    balance: field,
    merkle_path: [Sha256Digest; MERKLE_TREE_HEIGHT]
) -> PublicInput {
    let leaf_hash = balance_hash(balance);

    let root_hash = restore_root_hash(
        leaf_hash,
        address,
        merkle_path,
    );

    PublicInput {
        address: address,
        balance: balance,
        root_hash: root_hash,
    }
}
