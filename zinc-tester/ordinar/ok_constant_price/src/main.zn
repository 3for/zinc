//!
//! The 'constant_price' contract entry.
//!

type Address = u160;
type Balance = u248;

enum TokenAddress {
    ETH = 0x0000000000000000000000000000000000000000,
    DAI = 0xe015cbd9a6f74495d9b568f93a741c1eb602b78b,
    wBTC = 0x9934eb5a9a83b4ba468cf5739afcd0eb31df825a,
    BAT = 0x417155b70868b2c0f7e65be0e764ee9384d0a453,
    MLTT = 0x7ebab6cbe1aafc22c1877feaa1d552b80ca91a09,
}

impl TokenAddress {
    pub fn is_known(address: Address) -> bool {
        match address {
            0x0000000000000000000000000000000000000000 => true,
            0xe015cbd9a6f74495d9b568f93a741c1eb602b78b => true,
            0x9934eb5a9a83b4ba468cf5739afcd0eb31df825a => true,
            0x417155b70868b2c0f7e65be0e764ee9384d0a453 => true,
            0x7ebab6cbe1aafc22c1877feaa1d552b80ca91a09 => true,
            _ => false,
        }
    }
}

contract ConstantPrice {
    const MAX_FEE: u16 = 10000;
    const PRECISION_MUL: Balance = 1E3;

    pub fee: u16;

    pub fn new(fee: u16) -> Self {
        require(fee <= Self::MAX_FEE, "The fee value must be between 0 and 10000");

        Self {
            fee: fee,
        }
    }

    pub fn deposit(mut self) {
        require(zksync::msg.recipient == self.address, "The transfer recipient is not the contract");
        require(TokenAddress::is_known(zksync::msg.token_address), "The deposited token is unknown");
        require(zksync::msg.amount > 0, "Cannot deposit zero tokens");
    }

    pub fn exchange(
        mut self,
        withdraw_token: Address,
    ) {
        require(zksync::msg.recipient == self.address, "The transfer recipient is not the contract");
        require(TokenAddress::is_known(zksync::msg.token_address), "The deposited token is unknown");
        require(TokenAddress::is_known(withdraw_token), "The withdrawn token is unknown");
        require(zksync::msg.token_address != withdraw_token, "Cannot withdraw the same token");

        let withdraw_token_amount = zksync::msg.amount *
            ((Self::MAX_FEE - self.fee) as Balance * Self::PRECISION_MUL / Self::MAX_FEE as Balance) /
            Self::PRECISION_MUL;

        self.transfer(zksync::msg.sender, withdraw_token, withdraw_token_amount);
    }

    pub fn get_fee(self) -> u16 {
        self.fee
    }
}

#[test]
#[should_panic]
fn panic() {
    require(false);
}
