//!
//! The '&&' operator tests.
//!

struct ResultBool {
    and_false_false: bool,
    and_false_true: bool,
    and_true_false: bool,
    and_true_true: bool,
}

impl ResultBool {
    fn test() -> Self {
        Self {
            and_false_false: false && false,
            and_false_true: false && true,
            and_true_false: true && false,
            and_true_true: true && true,
        }
    }
}

struct ResultWitness {
    and_const_const: bool,
    and_const_value: bool,
    and_value_const: bool,
    and_value_value: bool,
}

impl ResultWitness {
    fn test(witness: bool) -> Self {
        Self {
            and_const_const: false && false,
            and_const_value: false && witness,
            and_value_const: witness && false,
            and_value_value: witness && witness,
        }
    }
}

struct Result {
    result_bool: ResultBool,
    result_witness: ResultWitness,
}

impl Result {
    fn test(witness: bool) -> Self {
        Self {
            result_bool: ResultBool::test(),
            result_witness: ResultWitness::test(witness),
        }
    }
}
