//!
//! The '/' operator tests.
//!

struct ResultU8 {
    div_zero_value: u8,
    div_value_value: u8,
    div_max: u8,
}

impl ResultU8 {
    fn test() -> Self {
        Self {
            div_zero_value: 0 / 5,
            div_value_value: 5 / 3,
            div_max: 255 / 1,
        }
    }
}

struct ResultI8 {
    div_zero_value: i8,
    div_value_value: i8,
    div_max: i8,
    div_min: i8,
}

impl ResultI8 {
    fn test() -> Self {
        Self {
            div_zero_value: 0 as i8 / 8 as i8,
            div_value_value: 13 as i8 / 8 as i8,
            div_max: 127 as i8 / 1 as i8,
            div_min: -128 / 1 as i8,
        }
    }
}

struct ResultU64 {
    div_zero_value: u64,
    div_value_value: u64,
    div_max: u64,
}

impl ResultU64 {
    fn test() -> Self {
        Self {
            div_zero_value: 0 as u64 / 34 as u64,
            div_value_value: 34 as u64 / 21 as u64,
            div_max: 0xFFFF_FFFF_FFFF_FFFF / 1 as u64,
        }
    }
}

struct ResultI64 {
    div_zero_value: i64,
    div_value_value: i64,
    div_max: i64,
    div_min: i64,
}

impl ResultI64 {
    fn test() -> Self {
        Self {
            div_zero_value: 0 as i64 / 89 as i64,
            div_value_value: 89 as i64 / 55 as i64,
            div_max: 0x7FFF_FFFF_FFFF_FFFF as i64 / 1 as i64,
            div_min: -0x8000_0000_0000_0000 / 1 as i64,
        }
    }
}

struct ResultU248 {
    div_zero_value: u248,
    div_value_value: u248,
    div_max: u248,
}

impl ResultU248 {
    fn test() -> Self {
        Self {
            div_zero_value: 0 as u248 / 233 as u248,
            div_value_value: 233 as u248 / 144 as u248,
            div_max: 0xFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF / 1 as u248,
        }
    }
}

struct ResultI248 {
    div_zero_value: i248,
    div_value_value: i248,
    div_max: i248,
    div_min: i248,
}

impl ResultI248 {
    fn test() -> Self {
        Self {
            div_zero_value: 0 as i248 / 610 as i248,
            div_value_value: 610 as i248 / 377 as i248,
            div_max: 0x7F_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF as i248 / 1 as i248,
            div_min: -0x80_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 / 1 as i248,
        }
    }
}

struct ResultWitness {
    div_const_const: u8,
    div_const_value: u8,
    div_value_const: u8,
    div_value_value: u8,
}

impl ResultWitness {
    fn test(bigger: u8) -> Self {
        let smaller = 16;
        Self {
            div_const_const: 52 / 16,
            div_const_value: 52 / smaller,
            div_value_const: bigger / 16,
            div_value_value: bigger / smaller,
        }
    }
}

struct Result {
    result_u8: ResultU8,
    result_i8: ResultI8,
    result_u64: ResultU64,
    result_i64: ResultI64,
    result_u248: ResultU248,
    result_i248: ResultI248,
    result_witness: ResultWitness,
}

impl Result {
    fn test(witness: u8) -> Self {
        Self {
            result_u8: ResultU8::test(),
            result_i8: ResultI8::test(),
            result_u64: ResultU64::test(),
            result_i64: ResultI64::test(),
            result_u248: ResultU248::test(),
            result_i248: ResultI248::test(),
            result_witness: ResultWitness::test(witness),
        }
    }
}
