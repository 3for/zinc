//!
//! The 'integration' main module.
//!

mod addition;
mod subtraction;
mod multiplication;
mod division;
mod remainder;

mod equals;
mod not_equals;
mod greater_equals;
mod greater;
mod lesser_equals;
mod lesser;

mod or;
mod xor;
mod and;
mod not;

mod hash;

struct Result {
    addition: addition::Result,
    subtraction: subtraction::Result,
    multiplication: multiplication::Result,
    division: division::Result,
    remainder: remainder::Result,

    equals: equals::Result,
    not_equals: not_equals::Result,
    greater_equals: greater_equals::Result,
    greater: greater::Result,
    lesser_equals: lesser_equals::Result,
    lesser: lesser::Result,

    or: or::Result,
    xor: xor::Result,
    and: and::Result,
    not: not::Result,

    hash: hash::Result,
}

fn main(
    witness_bool: bool,
    witness_integer: u8,
) -> Result {
    Result {
        addition: addition::Result::test(witness_integer),
        subtraction: subtraction::Result::test(witness_integer),
        multiplication: multiplication::Result::test(witness_integer),
        division: division::Result::test(witness_integer),
        remainder: remainder::Result::test(witness_integer),

        equals: equals::Result::test(witness_integer),
        not_equals: not_equals::Result::test(witness_integer),
        greater_equals: greater_equals::Result::test(witness_integer),
        greater: greater::Result::test(witness_integer),
        lesser_equals: lesser_equals::Result::test(witness_integer),
        lesser: lesser::Result::test(witness_integer),

        or: or::Result::test(witness_bool),
        xor: xor::Result::test(witness_bool),
        and: and::Result::test(witness_bool),
        not: and::Result::test(witness_bool),

        hash: hash::Result::test(),
    }
}
